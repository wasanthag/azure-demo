# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  name: 'default'

stages:
  - stage: Init
    jobs:
    - job: Init
      continueOnError: false
      steps:
      - script: |
          echo Initializing Terraform with TFE remote backend
          cd k8s
          terraform init -no-color -backend-config="token=xJBnw4QmfAmbJw.atlasv1.4Alv2dxmVCV3i1A2AZgJNRDO6ep19Wq63OyRRLFpk5v7f72QzGi3JJu6Mg1DuJNh76c"
        displayName: 'Initialize Terraform'

  - stage: Validate
    jobs:
    - job: Validate
      continueOnError: false
      steps:
      - script: |
          echo Validate Terraform Code with TFE remote backend
          cd k8s
          terraform init -no-color -backend-config="token=xJBnw4QmfAmbJw.atlasv1.4Alv2dxmVCV3i1A2AZgJNRDO6ep19Wq63OyRRLFpk5v7f72QzGi3JJu6Mg1DuJNh76c"
          terraform validate -no-color
        displayName: 'Validate Terraform Code'

  - stage: Plan
    jobs:
    - job: Plan
      continueOnError: false
      steps:
      - script: |
          echo Run Terraform plan with TFE remote backend
          cd k8s
          terraform init -no-color -backend-config="token=xJBnw4QmfAmbJw.atlasv1.4Alv2dxmVCV3i1A2AZgJNRDO6ep19Wq63OyRRLFpk5v7f72QzGi3JJu6Mg1DuJNh76c"
          terraform plan -no-color
        displayName: 'Run Terraform Plan'

  - stage: Apply
    jobs:
    - job: Apply
      continueOnError: false
      steps:
      - script: |
          echo Applying Terraform with TFE remote backend
          cd k8s
          terraform init -no-color -backend-config="token=xJBnw4QmfAmbJw.atlasv1.4Alv2dxmVCV3i1A2AZgJNRDO6ep19Wq63OyRRLFpk5v7f72QzGi3JJu6Mg1DuJNh76c"
          terraform apply -no-color
      displayName: 'Apply Terraform'